lm
install.packages("knitr")
require(knitr)
type: exclaim
type: exclaim
width: 1440
require(ggplot2)
require(lme4)
#exploratory plots
census = read.csv("~/Dropbox/BCI Monkey Data/milton_census.csv", head = T, sep = ',')
census$yearf = factor(census$year)
census$monthf = factor(census$month)
census$locf = factor(census$loc)
census$season <- ifelse(census$month < 5, 1, ifelse(census$month >8, 3, 2))
census$season = factor(census$season)
newcensus = subset(census, year > 1999)
qqnorm(census$troopsize)
qqline(census$troopsize)
qqnorm(log(census$troopsize))
qqline(log(census$troopsize))
c <- ggplot(census, aes(year, log(troopsize)))
c + stat_smooth() + geom_point(aes(color = monthf))
stat_sum_single <- function(fun, geom="point", ...) {
stat_summary(fun.y=fun, colour="red", geom=geom, size = 1, ...)
}
c <- ggplot(census, aes(year, troopsize))
c + stat_sum_single(median, geom="line") + stat_smooth( size = 1) + geom_point(size = 3, alpha = 1/3) + theme_bw()
c <- ggplot(census, aes(season, troopsize))
c + geom_boxplot(outlier.size = 0) + geom_point(size = 5, alpha = 1/10)
pt Linear Mixed Effects model
fm1 <- lmer(troopsize ~ year + (1 | monthf) , data = census, REML = FALSE)
AIC(fm1)
#GLMM w/ log link (poisson)
fm2 <- glmer(troopsize ~ year + (1 | monthf) , data = census, family = "poisson")
AIC(fm2)
require(lme4)
install.packages("lme4")
fm1 <- lmer(troopsize ~ year + (1 | monthf) , data = census, REML = FALSE)
require(lme4)
fm1 <- lmer(troopsize ~ year + (1 | monthf) , data = census, REML = FALSE)
AIC(fm1)
#GLMM w/ log link (poisson)
fm2 <- glmer(troopsize ~ year + (1 | monthf) , data = census, family = "poisson")
AIC(fm2)
control=glmerControl(optimizer="bobyqa")
fm01ML <-  glmer(troopsize ~ scale(year) + (1 | monthf) , data = census, family = "poisson",start=0.01, control=glmerControl(optimizer="bobyqa"))
fm01ML <-  glmer(troopsize ~ scale(year) + (1 + scale(year) | monthf) , data = census, family = "poisson", control=glmerControl(optimizer="bobyqa"))
?glmer.nb
fm01ML <-  glmer.nb(troopsize ~ scale(year) + (1 + scale(year) | monthf) , data = census, control=glmerControl(optimizer="bobyqa"))
fm01ML <-  glmer.nb(troopsize ~ scale(year) + (1 | monthf) , data = census, control=glmerControl(optimizer="bobyqa"))
fm01ML
nbML <- glmer.nb(troopsize ~ scale(year) + (1 | month) , data = census)
rpois(20000)
rpois(1)
rpois(1,1)
rpois(1,10000)
rpois(1,10000)
rpois(1,10000)
rpois(1,10000)
runif(1,1000)
runif(1)
runif(1)
runif(1)
?runif
set.seed(124124)
system.time( boo01 <- bootMer(nbML, mySumm, nsim = 1000) )
system.time( boo01 <- bootMer(nbML, mySumm, nsim = 1000) )
5
nbML <- glmer.nb(troopsize ~ scale(year) + (1 | month) , data = census)
mySumm <- function(.) { s <- sigma(.)
c(beta =getME(., "beta"), sigma = s, sig01 = unname(s * getME(., "theta"))) }
(t0 <- mySumm(nbML)) # just three parameters
set.seed(124124)
system.time( boo01 <- bootMer(nbML, mySumm, nsim = 1000) )
install.packages("R-INLA")
source("http://www.math.ntnu.no/inla/givemeINLA.R")
require(R-INLA)
inla.upgrade()
inla
length(census)
nrow(census)
?inla
result = inla(formula = troopsize ~ 1+scale(year)+f(month,model="iid"), family = "nbinomial", data = census,
control.family = list(hyper = list(
theta = list(
prior="gaussian",
param = c(0,0.01)))))
summary(result)
nbML
formule_random_intercept_only = troopsize ~ scale(year) + f(month, model = "iid")
model_random_intecept_only_INLA = inla.cpo(formula=formule_random_intercept_only, data=census,
family="nbinomial", control.compute=list(dic=TRUE))
formule_random_intercept_only = troopsize ~ scale(year) + f(month, model = "iid")
model_random_intecept_only_INLA = inla.cpo(formula=formule_random_intercept_only, data=census,
family="nbinomial")
model_random_intecept_only_INLA = inla.cpo(formula=formule_random_intercept_only, data=census,
family="gaussian", control.compute=list(dic=TRUE))
?inla.cpo
model_random_intecept_only_INLA = inla(formula=formule_random_intercept_only, data=census,
family="nbinomial", control.compute=list(dic=TRUE))
summary(model_random_intecept_only_INLA)
summary(nbML)
library(ncf)
install.packages("ncf")
library(ncf)
?CorRes.glmer
ncf
?spline.correlog
?spline.correlog.2D
plot(nbML)
scale(census$year)
plot(resid(nbML))
plot(resid(nbML)~scale(census$year))
str(nbML)
qplot(resid(nbML)~scale(census$year))
summary(model_random_intecept_only_INLA)
fmNB
nbML
formule_random_intercept_only = troopsize ~ scale(year) + f(month)
model_random_intecept_only_INLA = inla(formula=formule_random_intercept_only, data=census,
family="nbinomial", control.compute=list(dic=TRUE))
summary(model_random_intecept_only_INLA)
?inla
formule_random_intercept_only = troopsize ~ scale(year) + f(month, model = "iid", prior = c(0.01, 0.01))
model_random_intecept_only_INLA = inla(formula=formule_random_intercept_only, data=census,
family="nbinomial", control.compute=list(dic=TRUE))
formule_random_intercept_only = troopsize ~ scale(year) + f(month, model = "iid",param=c(0.001,0.001))
model_random_intecept_only_INLA = inla(formula=formule_random_intercept_only, data=census,
family="nbinomial", control.compute=list(dic=TRUE))
summary(model_random_intecept_only_INLA)
1/255
1/exp(255)
log(255)
formule_random_intercept_only = troopsize ~ scale(year) + f(month, model = "iid",param=c(1,0.01))
model_random_intecept_only_INLA = inla(formula=formule_random_intercept_only, data=census,
family="nbinomial", control.compute=list(dic=TRUE))
summary(model_random_intecept_only_INLA)
formule_random_intercept_only = troopsize ~ scale(year) + f(month, model = "iid",param=c(1,0.01))
model_random_intecept_only_INLA = inla(formula=formule_random_intercept_only, data=census,
family="nbinomial", control.compute=list(dic=TRUE))
summary(model_random_intecept_only_INLA)
formule_random_intercept_only = troopsize ~ scale(year) + f(month, model = "iid",param=c(1,10000))
model_random_intecept_only_INLA = inla(formula=formule_random_intercept_only, data=census,
family="nbinomial", control.compute=list(dic=TRUE))
summary(model_random_intecept_only_INLA)
inla.hyperpar(model_random_intecept_only_INLA)
summary(inla.hyperpar(model_random_intecept_only_INLA))
summary(nbML)
formule_random_intercept_only = troopsize ~ scale(year) + f(month, model = "iid",param=c(0.0000001,0.00000001))
model_random_intecept_only_INLA = inla(formula=formule_random_intercept_only, data=census,
family="nbinomial", control.compute=list(dic=TRUE))
inla.hyperpar(model_random_intecept_only_INLA)
summary(model_random_intecept_only_INLA)
formule_random_intercept_only = troopsize ~ scale(year) + f(month, model = "iid",param=c(1,1))
model_random_intecept_only_INLA = inla(formula=formule_random_intercept_only, data=census,
family="nbinomial", control.compute=list(dic=TRUE))
inla.hyperpar(model_random_intecept_only_INLA)
summary(model_random_intecept_only_INLA)
formule_random_intercept_only = troopsize ~ scale(year) + f(month, model = "iid",param=c(1,100000))
model_random_intecept_only_INLA = inla(formula=formule_random_intercept_only, data=census,
family="nbinomial", control.compute=list(dic=TRUE))
inla.hyperpar(model_random_intecept_only_INLA)
summary(model_random_intecept_only_INLA)
formule_random_intercept_only = troopsize ~ scale(year) + f(month, model = "iid",param=c(1,10000))
model_random_intecept_only_INLA = inla(formula=formule_random_intercept_only, data=census,
family="nbinomial", control.compute=list(dic=TRUE))
inla.hyperpar(model_random_intecept_only_INLA)
summary(model_random_intecept_only_INLA)
install.packages("sequinr")
install.packages("sequinr", type = "source")
install.packages("seqinr")
require(seqinr)
data(caitab)
head(caitab)
w <- caitab$sc
q
input <- read.fasta(file = "Dropbox/Kimchi Metagenome/J1/J1.bacterial.proteins.parsed.fna") # read the FASTA file
head(input)
caita
caitab
w <- caitab$sc
w
caitab = uco(input)
head(caitab)
setwd("~/Dropbox")
setwd("~/Dropbox/R Code/ModelingServer")
install.packages("simecol")
require(shiny)
runApp("LotkaVolterraCompPrey/")
install.packages("scatterplot3d")
runApp("LotkaVolterraCompPrey/")
runApp("LotkaVolterraCompPrey/")
runApp("LotkaVolterraCompPrey/")
install.packages(shinyapps)
install.packages("shinyapps")
if (!require("devtools"))
install.packages("devtools")
devtools::install_github("rstudio/shinyapps")
require(shinyapps)
shinyapps::setAccountInfo(name='davearmitage', token='6CE42ABA5455519428927C2DD03395A2', secret='W/DtNO0iJcWdSytxoraCNULQKOgNk8LQE4Q0jmR4')
shinyapps::setAccountInfo(name='davearmitage', token='6CE42ABA5455519428927C2DD03395A2', secret='W/DtNO0iJcWdSytxoraCNULQKOgNk8LQE4Q0jmR4')
shinyapps::setAccountInfo(name='davearmitage', token='6CE42ABA5455519428927C2DD03395A2', secret='W/DtNO0iJcWdSytxoraCNULQKOgNk8LQE4Q0jmR4')
deployApp("LotkaVolterraCompPrey/")
deployApp("LotkaVolterraPredPrey/")
deployApp("LotkaVolterraCompPrey/")
deployApp("LotkaVolterraPredPrey/")
deployApp("LotkaVolterraCompPrey/")
deployApp("LotkaVolterraPredPrey/")
deployApp("LotkaVolterraPredPrey/")
deployApp("LotkaVolterraPredPrey/")
deployApp("LotkaVolterraPredPrey/")
