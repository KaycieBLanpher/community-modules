shiny::runApp('Desktop/EcoDevel/Fa14_DaveA/ModelingServer/ShinyTest')
lv
lv
require(simecol)
data(lv)
lv
lv
lv <- new("odeModel",
main = function (time, init, parms) {
x <- init
p <- parms
dx1 <-   p["k1"] * x[1] - p["k2"] * x[1] * x[2]
dx2 <- - p["k3"] * x[2] + p["k2"] * x[1] * x[2]
list(c(dx1, dx2))
},
parms  = c(k1=0.2, k2=0.2, k3=0.2),
times  = c(from=0, to=100, by=0.5),
init   = c(prey=0.5, predator=1),
solver = "rk4"
)
shiny::runApp('Desktop/EcoDevel/Fa14_DaveA/ModelingServer/ShinyTest')
shiny::runApp('Desktop/EcoDevel/Fa14_DaveA/ModelingServer/ShinyTest')
shiny::runApp('Desktop/EcoDevel/Fa14_DaveA/ModelingServer/ShinyTest')
shiny::runApp('Desktop/EcoDevel/Fa14_DaveA/ModelingServer/ShinyTest')
shiny::runApp('Desktop/EcoDevel/Fa14_DaveA/ModelingServer/ShinyTest')
?sliderInput
shiny::runApp('Desktop/EcoDevel/Fa14_DaveA/ModelingServer/ShinyTest')
shiny::runApp('Desktop/EcoDevel/Fa14_DaveA/ModelingServer/ShinyTest')
shiny::runApp('Desktop/EcoDevel/Fa14_DaveA/ModelingServer/ShinyTest')
out(sim(lvK))$time
lvK <- new("odeModel",
main = function (time, init, parms) {
x <- init
p <- parms
dx1 <-   p["k1"] * (1-x[1]/p["k4"]) - p["k2"] * x[1] * x[2]
dx2 <- - p["k3"] * x[2] + p["k2"] * x[1] * x[2]
list(c(dx1, dx2))
},
parms  = c(k1=0.2, k2=0.2, k3=0.2, k4 =1),
times  = c(from=0, to=100, by=0.5),
init   = c(prey=0.5, predator=1),
solver = "rk4"
)
out(sim(lvK))$time
plot(out(sim(lvK, hmax = 1))$p
out(sim(lvK, hmax = 1))$predator
out(sim(lvK))
out(sim(lvK))$predator
shiny::runApp('Desktop/EcoDevel/Fa14_DaveA/ModelingServer/ShinyTest')
traceback()
shiny::runApp('Desktop/EcoDevel/Fa14_DaveA/ModelingServer/ShinyTest')
out(sim(lvK))$time
min(out(sim(lvK))[2]))
min(out(sim(lvK))[2])
out(sim(lvK))$prey
plot(out(sim(lvK))$prey,out(sim(lvK))$predator, main="Phase Diagram", type = "l",
xlab = "prey", ylab = "predator")
shiny::runApp('Desktop/EcoDevel/Fa14_DaveA/ModelingServer/ShinyTest')
shiny::runApp('Desktop/EcoDevel/Fa14_DaveA/ModelingServer/ShinyTest')
shiny::runApp('Desktop/EcoDevel/Fa14_DaveA/ModelingServer/ShinyTest')
shiny::runApp('Desktop/EcoDevel/Fa14_DaveA/ModelingServer/ShinyTest')
shiny::runApp('Desktop/EcoDevel/Fa14_DaveA/ModelingServer/ShinyTest')
lvK <- new("odeModel",
main = function (time, init, parms) {
x <- init
p <- parms
dx1 <-   x[1] * p["r"] * (1 - (x[1]/p["Kprey"]) â€“ ((p["u"] * x[2]) / (p["c"] + x[1])))
dx2 <-  -x[2] * p["s"] * (1 - (x[2] / (p["Kpred"] * (x[1]/p["Kprey"]))))
list(c(dx1, dx2))
},
parms  = c(r=0.2, Kprey=1, c=0.2, u = 0.2, s = 0.2, Kpred = 1),
times  = c(from=0, to=100, by=0.5),
init   = c(prey=0.5, predator=1),
solver = "rk4"
)
lvK <- new("odeModel",
main = function (time, init, parms) {
x <- init
p <- parms
dx1 <-   x[1] * p["r"] * (1 - (x[1]/p["Kprey"]) - ((p["u"] * x[2]) / (p["c"] + x[1])))
dx2 <-  -x[2] * p["s"] * (1 - (x[2] / (p["Kpred"] * (x[1]/p["Kprey"]))))
list(c(dx1, dx2))
},
parms  = c(r=0.2, Kprey=1, c=0.2, u = 0.2, s = 0.2, Kpred = 1),
times  = c(from=0, to=100, by=0.5),
init   = c(prey=0.5, predator=1),
solver = "rk4"
)
lvK
solve(lvK)
plot(out(lvK))
plot(out(sim(lvK)))
?lv
plot(sim(lvK))
plot(sim(lvK))
lvK <- new("odeModel",
main = function (time, init, parms) {
x <- init
p <- parms
dx1 <-   x[1] * p["r"] * (1 - (x[1]/p["Kprey"]) - ((p["u"] * x[2]) / (p["c"] + x[1])))
dx2 <-  -x[2] * p["s"] * (1 - (x[2] / (p["Kpred"] * (x[1]/p["Kprey"]))))
list(c(dx1, dx2))
},
parms  = c(r=0.2, Kprey=100, c=0.2, u = 0.2, s = 0.2, Kpred = 100),
times  = c(from=0, to=100, by=0.5),
init   = c(prey=0.5, predator=1),
solver = "rk4"
)
plot(sim(lvK))
out(sim(lvK))
lvK <- new("odeModel",
main = function (time, init, parms) {
x <- init
p <- parms
dx1 <-   x[1] * p["r"] * (1 - (x[1]/p["Kprey"]) - ((p["u"] * x[2]) / (p["c"] + x[1])))
dx2 <-  -x[2] * p["s"] * (1 - (x[2] / (p["Kpred"] * (x[1]/p["Kprey"]))))
list(c(dx1, dx2))
},
parms  = c(r=0.2, Kprey=100, c=0.2, u = 0.01, s = 0.1, Kpred = 100),
times  = c(from=0, to=100, by=0.5),
init   = c(prey=0.5, predator=1),
solver = "rk4"
)
out(sim(lvK))
plot(sim(lvK))
lvK <- new("odeModel",
main = function (time, init, parms) {
x <- init
p <- parms
dx1 <-   x[1] * p["r"] * (1 - (x[1]/p["Kprey"]) - ((p["u"] * x[2]) / (p["c"] + x[1])))
dx2 <-  -x[2] * p["s"] * (1 - (x[2] / (p["Kpred"] * (x[1]/p["Kprey"]))))
list(c(dx1, dx2))
},
parms  = c(r=0.2, Kprey=100, c=0.2, u = 0.08, s = 0.1, Kpred = 100),
times  = c(from=0, to=100, by=0.5),
init   = c(prey=1, predator=1),
solver = "rk4"
)
plot(sim(lvK))
lvK <- new("odeModel",
main = function (time, init, parms) {
x <- init
p <- parms
dx1 <-   x[1] * p["r"] * (1 - (x[1]/p["Kprey"]) - ((p["u"] * x[2]) / (p["c"] + x[1])))
dx2 <-  -x[2] * p["s"] * (1 - (x[2] / (p["Kpred"] * (x[1]/p["Kprey"]))))
list(c(dx1, dx2))
},
parms  = c(r=0.2, Kprey=100, c=0.2, u = 0.8, s = 0.1, Kpred = 100),
times  = c(from=0, to=100, by=0.5),
init   = c(prey=1, predator=1),
solver = "rk4"
)
plot(sim(lvK))
lvK <- new("odeModel",
main = function (time, init, parms) {
x <- init
p <- parms
dx1 <-   x[1] * p["r"] * (1 - (x[1]/p["Kprey"]) - ((p["u"] * x[2]) / (p["c"] + x[1])))
dx2 <-  -x[2] * p["s"] * (1 - (x[2] / (p["Kpred"] * (x[1]/p["Kprey"]))))
list(c(dx1, dx2))
},
parms  = c(r=0.2, Kprey=1, c=0.2, u = 0.8, s = 0.1, Kpred = 1),
times  = c(from=0, to=100, by=0.5),
init   = c(prey=1, predator=1),
solver = "rk4"
)
plot(sim(lvK))
lvK <- new("odeModel",
main = function (time, init, parms) {
x <- init
p <- parms
dx1 <-   x[1] * p["r"] * (1 - (x[1]/p["Kprey"]) - p["a"] * x[1] * x[2]
dx2 <-  p["c"] * p["a"] * x[1] * x[2] - p["m"] * x[2]
list(c(dx1, dx2))
},
parms  = c(r=0.2, K=10, c=0.2, a = 0.1, c = 0.1, m = 0.1),
times  = c(from=0, to=100, by=0.5),
init   = c(prey=1, predator=1),
solver = "rk4"
)
lvK <- new("odeModel",
main = function (time, init, parms) {
x <- init
p <- parms
dx1 <-   x[1] * p["r"] * (1 - (x[1]/p["Kprey"])) - p["a"] * x[1] * x[2]
dx2 <-   p["c"] * p["a"] * x[1] * x[2] - p["m"] * x[2]
list(c(dx1, dx2))
},
parms  = c(r=0.2, K=10, c=0.2, a = 0.1, c = 0.1, m = 0.1),
times  = c(from=0, to=100, by=0.5),
init   = c(prey=1, predator=1),
solver = "rk4"
)
lvK
plot(sim(lvK))
out(sim(lvK))
lvK <- new("odeModel",
main = function (time, init, parms) {
x <- init
p <- parms
dx1 <-   x[1] * p["r"] * (1 - (x[1]/p["K"])) - p["a"] * x[1] * x[2]
dx2 <-   p["c"] * p["a"] * x[1] * x[2] - p["m"] * x[2]
list(c(dx1, dx2))
},
parms  = c(r=0.2, K=1, c=0.2, a = 0.1, c = 0.1, m = 0.1),
times  = c(from=0, to=100, by=0.5),
init   = c(prey=1, predator=1),
solver = "rk4"
)
out(sim(lvK))
plot(sim(lvK))
lvK <- new("odeModel",
main = function (time, init, parms) {
x <- init
p <- parms
dx1 <-   x[1] * p["r"] * (1 - (x[1]/p["K"])) - p["a"] * x[1] * x[2]
dx2 <-   p["c"] * p["a"] * x[1] * x[2] - p["m"] * x[2]
list(c(dx1, dx2))
},
parms  = c(r=0.2, K=10, c=0.2, a = 0.1, c = 0.1, m = 0.1),
times  = c(from=0, to=100, by=0.5),
init   = c(prey=1, predator=1),
solver = "rk4"
)
times(lvK)["by"] <- 1
times(lvK)["to"] <-10000
output$distPlot <- renderPlot({
parms(lvK) = c(k1 = input$r,
k2 = input$c,
k3 = input$m)
lvK <- new("odeModel",
main = function (time, init, parms) {
x <- init
p <- parms
dx1 <-   x[1] * p["r"] * (1 - (x[1]/p["K"])) - p["a"] * x[1] * x[2]
dx2 <-   p["c"] * p["a"] * x[1] * x[2] - p["m"] * x[2]
list(c(dx1, dx2))
},
parms  = c(r=0.2, K=10, c=0.2, a = 0.1, c = 0.1, m = 0.1),
times  = c(from=0, to=100, by=0.5),
init   = c(prey=1, predator=1),
solver = "rk4"
)
plot(sim(lvK))
times(lvK)["by"] <- 1
times(lvK)["to"] <-10000
plot(sim(lvK))
shiny::runApp('Desktop/EcoDevel/Fa14_DaveA/ModelingServer/ShinyTest')
shiny::runApp('Desktop/EcoDevel/Fa14_DaveA/ModelingServer/ShinyTest')
lvK <- new("odeModel",
main = function (time, init, parms) {
x <- init
p <- parms
dx1 <-   x[1] * p["r"] * (1 - (x[1]/p["K"])) - p["a"] * x[1] * x[2]
dx2 <-   p["c"] * p["a"] * x[1] * x[2] - p["m"] * x[2]
list(c(dx1, dx2))
},
parms  = c(r=NULL, K=NULL, a = NULL, c = NULL, m = NULL),
times  = c(from=0, to=100, by=0.5),
init   = c(prey=1, predator=1),
solver = "rk4"
)
shiny::runApp('Desktop/EcoDevel/Fa14_DaveA/ModelingServer/ShinyTest')
traceback()
lvK
out(sim(lvK))
head(out(sim(lvK)))
shiny::runApp('Desktop/EcoDevel/Fa14_DaveA/ModelingServer/ShinyTest')
shiny::runApp('Desktop/EcoDevel/Fa14_DaveA/ModelingServer/ShinyTest')
lvK <- new("odeModel",
main = function (time, init, parms) {
x <- init
p <- parms
dx1 <-   x[1] * p["r"] * (1 - (x[1]/p["K"])) - p["a"] * x[1] * x[2]
dx2 <-   p["c"] * p["a"] * x[1] * x[2] - p["m"] * x[2]
list(c(dx1, dx2))
},
parms  = c(r=0.2, K=10, a = 0.1, c = 0.1, m = 0.1),
times  = c(from=0, to=100, by=0.5),
init   = c(prey=1, predator=1),
solver = "rk4"
)
times(lvK)["by"] <- 1
times(lvK)["to"] <-10000
out(sim(lvK))
plot(sim(lvK)))
plot(sim(lvK))
shiny::runApp('Desktop/EcoDevel/Fa14_DaveA/ModelingServer/ShinyTest')
shiny::runApp('Desktop/EcoDevel/Fa14_DaveA/ModelingServer/ShinyTest')
shiny::runApp('Desktop/EcoDevel/Fa14_DaveA/ModelingServer/ShinyTest')
shiny::runApp('Desktop/EcoDevel/Fa14_DaveA/ModelingServer/ShinyTest')
shiny::runApp('Desktop/EcoDevel/Fa14_DaveA/ModelingServer/LotkaVolterraPredPrey')
setwd("~/Desktop/EcoDevel/Fa14_DaveA/ModelingServer/LotkaVolterraPredPrey")
shiny::runApp()
librarY(ggplot2)
library(ggplot2)
install.packages("ggplot2")
T
t
h
shiny::runApp()
init(lvK)
lvK <- new("odeModel",
main = function (time, init, parms) {
x <- init
p <- parms
dx1 <-   x[1] * p["r"] * (1 - (x[1]/p["K"])) - (p["a"]/(1+p["a"]*p["h"] * x[2])) * x[1] * x[2]
dx2 <-   ((p["c"] * p["a"])/(1+p["a"]*p["h"] * x[2])) * x[1] * x[2] - p["m"] * x[2]
list(c(dx1, dx2))
},
parms  = c(r=0.2, K=10, a = 0.1, c = 0.1, m = 0.1, h = 1),
times  = c(from=0, to=100, by=0.5),
init   = c(prey=1, predator=1),
solver = "rk4"
)
shiny::runApp()
shiny::runApp()
shiny::runApp()
shiny::runApp()
shiny::runApp()
shiny::runApp()
getSymbols
shiny::runApp()
shiny::runApp()
shiny::runApp()
shiny::runApp()
shiny::runApp()
shiny::runApp()
shiny::runApp()
shiny::runApp()
shiny::runApp()
shiny::runApp()
shiny::runApp()
lvNoK <- new("odeModel",
main = function (time, init, parms) {
x <- init
p <- parms
dx1 <-   x[1] * p["r"]  - (p["a"]/(1+p["a"]*p["h"] * x[2])) * x[1] * x[2]
dx2 <-   ((p["c"] * p["a"])/(1+p["a"]*p["h"] * x[2])) * x[1] * x[2] - p["m"] * x[2]
list(c(dx1, dx2))
},
parms  = c(r=0.2, a = 0.1, c = 0.1, m = 0.1, h = 1),
times  = c(from=0, to=100, by=0.5),
init   = c(prey=1, predator=1),
solver = "rk4"
)
shiny::runApp()
f
f1
f = TRUE
f
ifelse(f == FALSE, out(sim(lvNoK)), out(sim(lvK)))
lvNoK <- new("odeModel",
main = function (time, init, parms) {
x <- init
p <- parms
dx1 <-   x[1] * p["r"]  - (p["a"]/(1+p["a"]*p["h"] * x[2])) * x[1] * x[2]
dx2 <-   ((p["c"] * p["a"])/(1+p["a"]*p["h"] * x[2])) * x[1] * x[2] - p["m"] * x[2]
list(c(dx1, dx2))
},
parms  = c(r=0.2, a = 0.1, c = 0.1, m = 0.1, h = 1),
times  = c(from=0, to=100, by=0.5),
init   = c(prey=1, predator=1),
solver = "rk4"
)
lvK <- new("odeModel",
main = function (time, init, parms) {
x <- init
p <- parms
dx1 <-   x[1] * p["r"] * (1 - (x[1]/p["K"])) - (p["a"]/(1+p["a"]*p["h"] * x[2])) * x[1] * x[2]
dx2 <-   ((p["c"] * p["a"])/(1+p["a"]*p["h"] * x[2])) * x[1] * x[2] - p["m"] * x[2]
list(c(dx1, dx2))
},
parms  = c(r=0.2, K=10, a = 0.1, c = 0.1, m = 0.1, h = 1),
times  = c(from=0, to=100, by=0.5),
init   = c(prey=1, predator=1),
solver = "rk4"
)
ifelse(f == FALSE, out(sim(lvNoK)), out(sim(lvK)))
out(sim(lvNoK))
ifelse(f == FALSE, out(sim(lvNoK)), out(sim(lvK)))
f
ifelse(f == FALSE, print(out(sim(lvNoK))), print(out(sim(lvK))))
ifelse(f == FALSE, data.frame(out(sim(lvNoK))), data.frame(out(sim(lvK))))
out(sim(ifelse(f == FALSE, lvNoK, lvK)
)
)
ifelse(f == FALSE, lvNoK, lvK)
shiny::runApp()
inf/1
+inf
Inf/1
1-3/Inf
?checkboxInput
shiny::runApp()
shiny::runApp()
shiny::runApp()
shiny::runApp()
shiny::runApp()
max(c(dataInput()$prey, dataInput()$predator)
shiny::runApp()
