data <- read.table("data/MicroSpeciation.txt", sep = "\t", header = T)
```
# Calculations
```{r}
# Use exponetial function Sf = S0.e^rt, where Sf = species richness at time final,
# So is speices richnness at time of origin which equals 1, r is the rate of
# speciation, and t is the amount of time between origin and final
time <- data$Appeared - data$Extinction
rate <- (log(data$Richness/1)/time)
data <- data.frame(data, time, rate)
data <- data[order(rate),]
micro <- data[ which(data$Taxon == 'Microbes'),]
micro.r <- micro[,6]
# How does speciation rate estimated from exponential model and 10^12 compare to
# speciation rates estimate from the literature?
# Define a speciation event based on time it takes for 16S gene with length 1600 bp
# to accumulate enough substitutions so gene is 3% divergent.
# Number of substitutions needed is 1600 * 0.03 = 48
# Kuo and Ochman (2009) report substitution rates of 0.4 - 1.5 per million yrs.
# Corresponding times to divergence are 32 (48/1.5) to 120 (48/0.4) million yr.
# With speciation rates of 0.008 (1/120) to 0.0313 (1/32) per million yr.
# Lower range is very close to estimates from the exponetial model = 0.007 per million yr.
# With low speciation estimate, plugged into exponential model = 7.8 * 10^13
Sf.low <- 1 * exp(0.008*4000)
# With high speciation estimate, plugged into exponential model = 2.4 * 10^54
Sf.high <- 1 * exp(0.0313*4000)
# What would substitution rate need to be to get 10^12 species? = 0.33
micro.r * 48
# What if substitution rate was a bit lower (0.3)? How sensitive?
Sf.v.low <- 1 * exp((0.3/48)*4000)
formatC(Sf.v.low, format = "e", digits = 2)
shiny::runApp('GitHub/community-modules/bacteria-phage-chemostat')
require("vegan")
install.packages("vegan")
require(vegan)
?adonsis()
?adonis()
install.packages(deSolve)
install.packages("deSolve")
runApp('GitHub/community-modules/bacteria-phage-chemostat')
install.packages("(ggplot2")
install.packages(ggplot2)
require(ggplot2)
require("ggplot2")
install.packages(ggplot2)
install.packages("ggplot2")
install.packages("tidyr")
install.packages("shiny")
install.packages("shiny")
require("tidyr")
require("ggplot2")
runApp('GitHub/community-modules/bacteria-phage-chemostat')
runApp('GitHub/community-modules/bacteria-phage-chemostat')
runApp('GitHub/community-modules/bacteria-phage-chemostat')
runApp('GitHub/community-modules/bacteria-phage-chemostat')
3 e-7
3*exp(-7)
3*10^-7
3e-07
runApp('GitHub/community-modules/bacteria-phage-chemostat')
runApp('GitHub/community-modules/bacteria-phage-chemostat')
runApp('GitHub/community-modules/bacteria-phage-chemostat')
runApp('GitHub/community-modules/bacteria-phage-chemostat')
runApp('GitHub/community-modules/bacteria-phage-chemostat')
runApp('GitHub/community-modules/bacteria-phage-chemostat')
runApp('GitHub/community-modules/bacteria-phage-chemostat')
runApp('GitHub/community-modules/bacteria-phage-chemostat')
shiny::runApp('GitHub/community-modules/bacteria-phage-chemostat')
phage<-function(t,x,parms){
with(as.list(c(parms,x)),{
dR <- (R * d) - (N * umax * (R/(Ks + R))) - (R * d)
dN <- (N * umax * (R/(Ks + R))) - (P * N * a) - (N * d)
dP <- (b * N * P * a) - (P * N * a) - (d * P)
res=c(dR,dNt,dP)
list(res)
})
}
times=1:1000
parmsP = c(d = 0.2, umax = 0.7726, Ks = 0.727, b = 0.2, a = 3e-07)
init = c(R = 0.5, N= 1000, P = 10000)
outP=ode(y=init,times=times,func=phage,parms=parmsP)
phage<-function(t,x,parms){
with(as.list(c(parms,x)),{
dR <- (R * d) - (N * umax * (R/(Ks + R))) - (R * d)
dN <- (N * umax * (R/(Ks + R))) - (P * N * a) - (N * d)
dP <- (b * N * P * a) - (P * N * a) - (d * P)
res=c(dR,dN,dP)
list(res)
})
}
times=1:1000
parmsP = c(d = 0.2, umax = 0.7726, Ks = 0.727, b = 0.2, a = 3e-07)
init = c(R = 0.5, N= 1000, P = 10000)
outP=ode(y=init,times=times,func=phage,parms=parmsP)
outP
phage<-function(t,x,parms){
with(as.list(c(parms,x)),{
dR <- (r * d) - (N * umax * (R/(Ks + R))) * (y * (N * umax * (R/(Ks + R)))) - (R * d)
dN <- (N * umax * (R/(Ks + R))) - (P * N * a) - (N * d)
dP <- (b * N * P * a) - (P * N * a) - (d * P)
res=c(dR,dN,dP)
list(res)
})
}
times=1:1000
parmsP = c(d = 0.2, r = 0.5, umax = 0.7726, Ks = 0.727, y = 2e-06, b = 0.2, a = 3e-07)
init = c(R = 0.5, N= 1000, P = 10000)
outP=ode(y=init,times=times,func=phage,parms=parmsP)
outP
parmsP = c(d = 0.2, r = 0.5, umax = 0.7726, Ks = 0.727, y = 2e-06, b = 80, a = 3e-07)
init = c(R = 0.5, N= 1000, P = 10000)
outP=ode(y=init,times=times,func=phage,parms=parmsP)
outP
phage<-function(t,x,parms){
with(as.list(c(parms,x)),{
dR <- (r * d) - (N * umax * (R/(Ks + R))) * (y * (N * umax * (R/(Ks + R)))) - (R * d)
dN <- (N * umax * (R/(Ks + R))) - (P * N * a) - (N * d)
dP <- (b * N * P * a) - (P * N * a) - (d * P)
res=c(dR,dN,dP)
list(res)
})
}
times=1:1000
parmsP = c(d = 0.2, r = 0.5, umax = 0.7726, Ks = 0.0727, y = 2e-06, b = 80, a = 3e-07)
init = c(R = 0.5, N= 1000, P = 10000)
outP=ode(y=init,times=times,func=phage,parms=parmsP)
outP
parmsP = c(d = 0.2, r = 0.5, umax = 0.7726, Ks = 0.0727, y = 2e-06, b = 80, a = 3e-06)
init = c(R = 0.5, N= 1000, P = 10000)
outP=ode(y=init,times=times,func=phage,parms=parmsP)
outP
runApp('GitHub/community-modules/bacteria-phage-chemostat')
library(shiny)
ui <- fluidPage(
shinyWidgets::sliderTextInput("pvalue2","PValue:",
choices=c(0, 0.0001, 0.001, 0.01),
selected=0, grid = T)
)
server <- function(input, output) {}
shinyApp(ui, server)
log(5e-07)
log(3e-06)
log(1e-07)
runApp('GitHub/community-modules/bacteria-phage-chemostat')
runApp('GitHub/community-modules/bacteria-phage-chemostat')
runApp('GitHub/community-modules/bacteria-phage-chemostat')
1e-07
runApp('GitHub/community-modules/bacteria-phage-chemostat')
rm(list = ls())
getwd()
setwd("~/Users/lennonj/GitHub/community-modules/bacteria-phage-chemostat")
setwd("~/Users/lennonj/GitHub/community-modules/bacteria-phage-chemostat/")
setwd("~GitHub/community-modules/bacteria-phage-chemostat/")
getwd()
setwd("~GitHub/community-modules/bacteria-phage-chemostat/")
setwd("GitHub/community-modules/bacteria-phage-chemostat/")
require("deSolve")
phage<-function(t,x,parms){
with(as.list(c(parms,x)),{
dR <- (r * d) - (N * umax * (R/(Ks + R))) * (y * (N * umax * (R/(Ks + R)))) - (R * d)
dN <- (N * umax * (R/(Ks + R))) - (P * N * a) - (N * d)
dP <- (b * N * P * a) - (P * N * a) - (d * P)
res=c(dR,dN,dP)
list(res)
})
}
times=1:1000
parmsP = c(d = 0.2, r = 0.5, umax = 0.7726, Ks = 0.0727, y = 2e-06, b = 80, a = 3e-06)
init = c(R = 0.5, N= 1000, P = 10000)
outP=ode(y=init,times=times,func=phage,parms=parmsP)
runApp()
runApp()
phage<-function(t,x,parms){
with(as.list(c(parms,x)),{
dR <- (r * d) - (N * umax * (R/(Ks + R))) * (y * (N * umax * (R/(Ks + R)))) - (R * d)
dN <- (N * umax * (R/(Ks + R))) - (P * N * a) - (N * d)
dP <- (b * N * P * a) - (P * N * a) - (d * P)
res=c(dR,dN,dP)
list(res)
})
}
times=1:1000
parmsP = c(d = 0.2, r = 0.5, umax = 0.7726, Ks = 0.0727, y = 2e-06, b = 80, a = 3e-06)
init = c(R = 0.5, N= 1000, P = 10000)
outP=ode(y=init,times=times,func=phage,parms=parmsP)
outP
runApp()
dataInput
parms
runApp()
ticks <- ticks(length(var), nmin=30)
10e-07
runApp()
runApp()
runApp()
runApp()
?shiny::ticks
?shiny::tick
??tick
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
numlist <- prettyNum(c(1, seq(5000, (floor(428036/5000)*5000), 5000), 428036), big.mark = ",")
numlist
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
