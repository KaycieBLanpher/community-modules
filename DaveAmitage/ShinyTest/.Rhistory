require(simecol)
data(lv)
parms(lv)
main(lv)
sim(lv)
lv <- sim(lv)
plot(lv)
out(lv)
data(LVPP)
# Define UI for application that draws a histogram
shinyUI(fluidPage(
# Application title
titlePanel("Hello Shiny!"),
# Sidebar with a slider input for the number of bins
sidebarLayout(
sidebarPanel(
sliderInput("bins",
"Number of bins:",
min = 1,
max = 50,
value = 30)
),
# Show a plot of the generated distribution
mainPanel(
plotOutput("distPlot")
)
)
))
LVPP <- new("odeModel",
main = function(t, n, parms) {
with(parms, {
dn<-r*n +n*(A%*%n) list(c(dn))
}) },
parms = list(
# growth/death rates
r = c(k1 = 0.2, k3 = -0.2),
# interaction matrix
A = matrix(c(0.0, -0.2,
0.2,  0.0),
nrow = 2, ncol = 2, byrow=TRUE)
),
times  = c(from = 0, to = 100, by = 0.5),
init   = c(N1 = 0.5, N2 = 1),
solver = "lsoda"
)
plot(sim(LVPP))
LVPP <- new("odeModel",
main = function(t, n, parms) {
with(parms, {
dn<-r*n +n*(A%*%n) list(c(dn))
}) },
parms = list(
# growth/death rates
r = c(k1 = 0.2, k3 = -0.2),
# interaction matrix
A = matrix(c(0.0, -0.2,
0.2,  0.0),
nrow = 2, ncol = 2, byrow=TRUE)
),
times  = c(from = 0, to = 100, by = 0.5),
init   = c(N1 = 0.5, N2 = 1),
solver = "lsoda"
)
LVPP <- new("odeModel",
main = function(t, n, parms) {
with(parms, {
dn<-r*n +n*(A%*%n)
list(c(dn))
})
},
parms = list(
# growth/death rates
r = c(k1 = 0.2, k3 = -0.2),
# interaction matrix
A = matrix(c(0.0, -0.2,
0.2,  0.0),
nrow = 2, ncol = 2, byrow=TRUE)
),
times  = c(from = 0, to = 100, by = 0.5),
init   = c(N1 = 0.5, N2 = 1),
solver = "lsoda"
)
plot(sim(LVPP))
sim(LVPP)
out(sim(LVPP))
data(lv3)
out(sim(lv3))
?sim
